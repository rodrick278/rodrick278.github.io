(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{511:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),s("h3",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"}},[t._v("Map"),s("OutboundLink")],1),t._v(" 是一个带键的数据项的集合，就像一个 "),s("code",[t._v("Object")]),t._v(" 一样。 但是它们最大的差别是 "),s("code",[t._v("Map")]),t._v(" 允许任何类型的键，"),s("strong",[t._v("包括对象")]),t._v(" （key）。"),s("br"),t._v("它的方法和属性如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("new Map()")]),t._v(" —— 创建 map。\n"),s("ul",[s("li",[s("code",[t._v("new Map()")]),t._v(" 是返回一个空 map")]),t._v(" "),s("li",[s("code",[t._v("new Map([['a',10],['b',20],['c',30]])")]),t._v(" 这样是创建时填入数据")])])]),t._v(" "),s("li",[s("code",[t._v("map.set(key, value)")]),t._v(" —— 根据键存储值。")]),t._v(" "),s("li",[s("code",[t._v("map.get(key)")]),t._v(" —— 根据键来返回值，如果 "),s("code",[t._v("map")]),t._v(" 中不存在对应的 "),s("code",[t._v("key")]),t._v("，则返回 "),s("code",[t._v("undefined")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("map.has(key)")]),t._v(" —— 如果 "),s("code",[t._v("key")]),t._v(" 存在则返回 "),s("code",[t._v("true")]),t._v("，否则返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("map.delete(key)")]),t._v(" —— 删除指定键的值。")]),t._v(" "),s("li",[s("code",[t._v("map.clear()")]),t._v(" —— 清空 map。")]),t._v(" "),s("li",[s("code",[t._v("map.size")]),t._v(" —— 返回当前元素个数。")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意，虽然你可以使用 "),s("code",[t._v("map[key]")]),t._v(" 这种类似对象的使用方式来获取 value，但是这其中会有限制，比如 key 不能是 "),s("strong",[t._v("对象键")]),t._v(" ，所以一般 map 取值建议使用 "),s("code",[t._v("map.get(key)")])])]),t._v(" "),s("h3",{attrs:{id:"链式调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链式调用"}},[t._v("#")]),t._v(" 链式调用")]),t._v(" "),s("p",[t._v("由于 "),s("code",[t._v("map.set()")]),t._v(" 每次会返回 map 本身，所以可以进行链式调用：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'str'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'num'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bool'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"迭代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代"}},[t._v("#")]),t._v(" 迭代")]),t._v(" "),s("p",[t._v("迭代循环上 map 提供了三个方式：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("map.keys()")]),t._v(" —— 遍历并返回所有的键（returns an iterable for keys），")]),t._v(" "),s("li",[s("code",[t._v("map.values()")]),t._v(" —— 遍历并返回所有的值（returns an iterable for values），")]),t._v(" "),s("li",[s("code",[t._v("map.entries()")]),t._v(" —— 遍历并返回所有的实体（returns an iterable for entries）"),s("code",[t._v("[key, value]")]),t._v("，"),s("code",[t._v("for..of")]),t._v(" 在默认情况下使用的就是这个。")])]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("let ... of ...")]),t._v(" 来调用上面的三种情况，注意 "),s("code",[t._v("let item of map")]),t._v(" 和 "),s("code",[t._v("let item of map.entries()")]),t._v(" 是一样的"),s("br"),t._v(" "),s("br"),t._v("还可以使用 "),s("code",[t._v("map.forEach( (value,key,map) => { /* do sth */})")]),t._v(" 进行迭代")]),t._v(" "),s("h3",{attrs:{id:"对象转-map-object-entries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象转-map-object-entries"}},[t._v("#")]),t._v(" 对象转 Map (Object.entries)")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rodrick'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Map(2) {"name" => "rodrick", "age" => 24}')]),t._v("\n\n")])])]),s("p",[t._v("这里，"),s("code",[t._v("Object.entries")]),t._v(" 返回键/值对数组："),s("code",[t._v('[ ["name","rodrick"], ["age", 24] ]')]),t._v("。这就是 "),s("code",[t._v("Map")]),t._v(" 所需要的格式。"),s("br")]),t._v(" "),s("h3",{attrs:{id:"map-转对象-object-fromentries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map-转对象-object-fromentries"}},[t._v("#")]),t._v(" Map 转对象 (Object.fromEntries)")]),t._v(" "),s("p",[t._v("首先看一下 "),s("code",[t._v("Object.fromEntries")]),t._v(" 是做什么的")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prices "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromEntries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'banana'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'orange'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'meat'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 现在 prices = { banana: 1, orange: 2, meat: 4 }")]),t._v("\n")])])]),s("p",[s("code",[t._v("Object.fromEntries")]),t._v(" 是将一个 "),s("code",[t._v("entries")]),t._v(" 转换为对象并返回，那么我们就可以通过他将 Map 转为对象：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'banana'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'orange'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'meat'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromEntries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {banana: 1, orange: 2, meat: 4}")]),t._v("\n\n")])])]),s("p",[t._v("其实直接使用 "),s("code",[t._v("let obj = Object.fromEntries(map)")]),t._v(" 也是可以的，因为 "),s("code",[t._v("Object.fromEntries")]),t._v(" 期望得到一个可迭代对象作为参数，而不一定是数组。并且 "),s("code",[t._v("map")]),t._v(" 的标准迭代会返回跟 "),s("code",[t._v("map.entries()")]),t._v(" 一样的键/值对。因此，我们可以获得一个普通对象（plain object），其键/值对与 "),s("code",[t._v("map")]),t._v(" 相同。")]),t._v(" "),s("h2",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),s("h3",{attrs:{id:"基础-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础-2"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("p",[s("code",[t._v("Set")]),t._v(" 是一个特殊的类型集合 —— “值的集合”（没有键），它的每一个值只能出现一次。"),s("br"),t._v("它的主要方法如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("new Set(iterable)")]),t._v(" —— 创建一个 "),s("code",[t._v("set")]),t._v("，如果提供了一个 "),s("code",[t._v("iterable")]),t._v(" 对象（ "),s("strong",[t._v("通常是数组")]),t._v(" ），将会从数组里面复制值到 "),s("code",[t._v("set")]),t._v(" 中。")]),t._v(" "),s("li",[s("code",[t._v("set.add(value)")]),t._v(" —— 添加一个值，返回 set 本身")]),t._v(" "),s("li",[s("code",[t._v("set.delete(value)")]),t._v(" —— 删除值，如果 "),s("code",[t._v("value")]),t._v(" 在这个方法调用的时候存在则返回 "),s("code",[t._v("true")]),t._v(" ，否则返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("set.has(value)")]),t._v(" —— 如果 "),s("code",[t._v("value")]),t._v(" 在 set 中，返回 "),s("code",[t._v("true")]),t._v("，否则返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("set.clear()")]),t._v(" —— 清空 set。")]),t._v(" "),s("li",[s("code",[t._v("set.size")]),t._v(" —— 返回元素个数。")])]),t._v(" "),s("p",[s("br"),t._v("它的主要特点是，重复使用同一个值调用 "),s("code",[t._v("set.add(value)")]),t._v(" 并不会发生什么改变。这就是 "),s("code",[t._v("Set")]),t._v(" 里面的每一个值只出现一次的原因。这在我们处理 "),s("strong",[t._v("数组去重")]),t._v(" 时非常常用(不用遍历数组再挨个 find -> push 了)：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arrRet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解构赋值 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES5: Array.from 可以接受一个可迭代或类数组的值,效果相同")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let arrRet = Array.from(new Set(arr)) ")]),t._v("\n\nconsolo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrRet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["aa", "bb"]')]),t._v("\n")])])]),s("p",[s("br"),t._v("在不需要重复值的情况下，如果使用数组，每次 push 的时候都需要使用 find 方法取判断一次，性能很差 。")]),t._v(" "),s("h3",{attrs:{id:"迭代-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代-2"}},[t._v("#")]),t._v(" 迭代")]),t._v(" "),s("p",[t._v("我们可以使用 "),s("code",[t._v("for..of")]),t._v(" 或 "),s("code",[t._v("forEach")]),t._v(" 来遍历 Set：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"oranges"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"apples"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bananas"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与 forEach 相同：")]),t._v("\nset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valueAgain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这里注意， "),s("code",[t._v("valueAgain")]),t._v(" 其实和 "),s("code",[t._v("value")]),t._v(" 是一样的值，这里会存在是因为为了与 "),s("code",[t._v("Map")]),t._v(" 兼容。当然，这看起来确实有些奇怪。但是这对在特定情况下轻松地用 "),s("code",[t._v("Set")]),t._v(" 代替 "),s("code",[t._v("Map")]),t._v(" 很有帮助，反之亦然。"),s("br"),t._v(" "),s("br"),s("code",[t._v("Map")]),t._v(" 中用于迭代的方法在 "),s("code",[t._v("Set")]),t._v(" 中也同样支持：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("set.keys()")]),t._v(" —— 遍历并返回所有的值（returns an iterable object for values），")]),t._v(" "),s("li",[s("code",[t._v("set.values()")]),t._v(" —— 与 "),s("code",[t._v("set.keys()")]),t._v(" 作用相同，这是为了兼容 "),s("code",[t._v("Map")]),t._v("，")]),t._v(" "),s("li",[s("code",[t._v("set.entries()")]),t._v(" —— 遍历并返回所有的实体（returns an iterable object for entries）"),s("code",[t._v("[value, value]")]),t._v("，它的存在也是为了兼容 "),s("code",[t._v("Map")]),t._v("。")])]),t._v(" "),s("p",[s("br"),t._v("不要想当然的觉得 "),s("code",[t._v("set.keys()")]),t._v(" 可能会返回 "),s("code",[t._v("0,1,2")]),t._v(" 这样的索引，实际上并不会，只会返回实际的值")]),t._v(" "),s("h2",{attrs:{id:"weakmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weakmap"}},[t._v("#")]),t._v(" WeakMap")]),t._v(" "),s("p",[s("code",[t._v("WeakMap")]),t._v(" 和 "),s("code",[t._v("Map")]),t._v(" 的第一个不同点就是，"),s("code",[t._v("WeakMap")]),t._v(" 的键必须是"),s("strong",[t._v("对象")]),t._v("，不能是原始值")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" weakMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nweakMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ok"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正常工作（以对象作为键）")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不能使用字符串作为键")]),t._v("\nweakMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Whoops"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Error，因为 "test" 不是一个对象')]),t._v("\n")])])]),s("p",[t._v("如果我们在 weakMap 中使用一个对象作为键，并且没有其他对这个对象的引用 —— 该对象将会被从内存（和map）中自动清除。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" john "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" weakMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nweakMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("john"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\njohn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 覆盖引用")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// john 被从内存中删除了！")]),t._v("\n")])])]),s("p",[t._v("与上面常规的 "),s("code",[t._v("Map")]),t._v(" 的例子相比，现在如果 "),s("code",[t._v("john")]),t._v(" 仅仅是作为 "),s("code",[t._v("WeakMap")]),t._v(" 的键而存在 —— 它将会被从 map（和内存）中自动删除。"),s("br"),t._v(" "),s("br"),s("code",[t._v("WeakMap")]),t._v(" 不支持迭代以及 "),s("code",[t._v("keys()")]),t._v("，"),s("code",[t._v("values()")]),t._v(" 和 "),s("code",[t._v("entries()")]),t._v(" 方法。所以没有办法获取 "),s("code",[t._v("WeakMap")]),t._v(" 的所有键或值。"),s("br"),s("code",[t._v("WeakMap")]),t._v(" 只有以下的方法：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("weakMap.get(key)")])]),t._v(" "),s("li",[s("code",[t._v("weakMap.set(key, value)")])]),t._v(" "),s("li",[s("code",[t._v("weakMap.delete(key)")])]),t._v(" "),s("li",[s("code",[t._v("weakMap.has(key)")])])]),t._v(" "),s("h2",{attrs:{id:"weakset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weakset"}},[t._v("#")]),t._v(" WeakSet")]),t._v(" "),s("p",[s("code",[t._v("WeakSet")]),t._v(" 的表现类似：")]),t._v(" "),s("ul",[s("li",[t._v("与 "),s("code",[t._v("Set")]),t._v(" 类似，但是我们只能向 "),s("code",[t._v("WeakSet")]),t._v(" 添加对象（而不能是原始值）。")]),t._v(" "),s("li",[t._v("对象只有在其它某个（些）地方能被访问的时候，才能留在 set 中。")]),t._v(" "),s("li",[t._v("跟 "),s("code",[t._v("Set")]),t._v(" 一样，"),s("code",[t._v("WeakSet")]),t._v(" 支持 "),s("code",[t._v("add")]),t._v("，"),s("code",[t._v("has")]),t._v(" 和 "),s("code",[t._v("delete")]),t._v(" 方法，但不支持 "),s("code",[t._v("size")]),t._v(" 和 "),s("code",[t._v("keys()")]),t._v("，并且不可迭代。")])]),t._v(" "),s("h2",{attrs:{id:"weakmap-和-weakset-的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-和-weakset-的使用场景"}},[t._v("#")]),t._v(" WeakMap 和 WeakSet 的使用场景")]),t._v(" "),s("ul",[s("li",[t._v("使用"),s("strong",[t._v("对象")]),t._v("作为 key 或者 Set 的值")]),t._v(" "),s("li",[t._v("在这个对象"),s("strong",[t._v("消失或不需要的时候")]),t._v("，对应的 Map 和 Set 里也不需要存在它")]),t._v(" "),s("li",[t._v("不需要进行"),s("strong",[t._v("迭代")])])]),t._v(" "),s("p",[t._v("**"),s("br"),t._v("例如：缓存一些对象、DOM 节点作为键名、等")]),t._v(" "),s("h2",{attrs:{id:"object-keys-values-entries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-keys-values-entries"}},[t._v("#")]),t._v(" Object.keys，values，entries")]),t._v(" "),s("p",[t._v("前面使用了 "),s("code",[t._v("map.keys()")]),t._v("，"),s("code",[t._v("map.values()")]),t._v(" 和 "),s("code",[t._v("map.entries()")]),t._v(" 方法"),s("br"),t._v("类似的，普通对象也有对应的方法，对于普通对象，下列这些方法是可用的：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/keys",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.keys(obj)"),s("OutboundLink")],1),t._v(" —— 返回一个包含该对象所有的键的数组。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/values",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.values(obj)"),s("OutboundLink")],1),t._v(" —— 返回一个包含该对象所有的值的数组。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/entries",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.entries(obj)"),s("OutboundLink")],1),t._v(" —— 返回一个包含该对象所有 [key, value] 键值对的数组。")])]),t._v(" "),s("p",[s("br"),t._v("但是注意，Map 中使用是 "),s("code",[t._v("map.keys()")]),t._v(" 这种形式，但是这里我们是 "),s("code",[t._v("Object.keys(obj)")]),t._v(" ,对象的这种使用方式更加灵活"),s("br"),t._v(" "),s("br"),t._v("并且， "),s("code",[t._v("Object.*")]),t._v(" 这种方法返回的是一个真正的数组，而非仅仅是可迭代对象"),s("br")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Object.keys/values/entries 会忽略 symbol 属性")]),t._v("\n就像 "),s("code",[t._v("for..in")]),t._v(" 循环一样，这些方法会忽略使用 "),s("code",[t._v("Symbol(...)")]),t._v(" 作为键的属性。\n通常这很方便。但是，如果我们也想要 Symbol 类型的键，那么这儿有一个单独的方法 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.getOwnPropertySymbols"),s("OutboundLink")],1),t._v("，它会返回一个只包含 Symbol 类型的键的数组。另外，还有一种方法 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reflect.ownKeys(obj)"),s("OutboundLink")],1),t._v("，它会返回 "),s("strong",[t._v("所有")]),t._v(" 键。")])]),t._v(" "),s("p",[s("br"),t._v("例如，我们有一个带有价格的对象，并想将它们加倍：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prices "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  banana"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  orange"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  meat"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" doublePrices "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromEntries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换为数组，之后使用 map 方法，然后通过 fromEntries 再转回到对象")]),t._v("\n  Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doublePrices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("meat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n")])])]),s("p",[t._v("可以很方便的做一些转换链的事情")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[s("code",[t._v("Map")]),t._v(" —— 是一个带键的数据项的集合。"),s("br"),t._v("方法和属性如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("new Map([iterable])")]),t._v(" —— 创建 map，可选择带有 "),s("code",[t._v("[key,value]")]),t._v(" 对的 "),s("code",[t._v("iterable")]),t._v("（例如数组）来进行初始化。")]),t._v(" "),s("li",[s("code",[t._v("map.set(key, value)")]),t._v(" —— 根据键存储值。")]),t._v(" "),s("li",[s("code",[t._v("map.get(key)")]),t._v(" —— 根据键来返回值，如果 "),s("code",[t._v("map")]),t._v(" 中不存在对应的 "),s("code",[t._v("key")]),t._v("，则返回 "),s("code",[t._v("undefined")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("map.has(key)")]),t._v(" —— 如果 "),s("code",[t._v("key")]),t._v(" 存在则返回 "),s("code",[t._v("true")]),t._v("，否则返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("map.delete(key)")]),t._v(" —— 删除指定键的值。")]),t._v(" "),s("li",[s("code",[t._v("map.clear()")]),t._v(" —— 清空 map 。")]),t._v(" "),s("li",[s("code",[t._v("map.size")]),t._v(" —— 返回当前元素个数。")])]),t._v(" "),s("p",[t._v("与普通对象 "),s("code",[t._v("Object")]),t._v(" 的不同点：")]),t._v(" "),s("ul",[s("li",[t._v("任何键、对象都可以作为键。")]),t._v(" "),s("li",[t._v("有其他的便捷方法，如 "),s("code",[t._v("size")]),t._v(" 属性。")])]),t._v(" "),s("p",[s("code",[t._v("Set")]),t._v(" —— 是一组唯一值的集合。"),s("br"),t._v("方法和属性：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("new Set([iterable])")]),t._v(" —— 创建 set，可选择带有 "),s("code",[t._v("iterable")]),t._v("（例如数组）来进行初始化。")]),t._v(" "),s("li",[s("code",[t._v("set.add(value)")]),t._v(" —— 添加一个值（如果 "),s("code",[t._v("value")]),t._v(" 存在则不做任何修改），返回 set 本身。")]),t._v(" "),s("li",[s("code",[t._v("set.delete(value)")]),t._v(" —— 删除值，如果 "),s("code",[t._v("value")]),t._v(" 在这个方法调用的时候存在则返回 "),s("code",[t._v("true")]),t._v(" ，否则返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("set.has(value)")]),t._v(" —— 如果 "),s("code",[t._v("value")]),t._v(" 在 set 中，返回 "),s("code",[t._v("true")]),t._v("，否则返回 "),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("set.clear()")]),t._v(" —— 清空 set。")]),t._v(" "),s("li",[s("code",[t._v("set.size")]),t._v(" —— 元素的个数。")])]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("Map")]),t._v(" 和 "),s("code",[t._v("Set")]),t._v(" 中迭代总是按照值插入的顺序进行的，所以我们不能说这些集合是无序的，但是我们不能对元素进行重新排序，也不能直接按其编号来获取元素。")])])}),[],!1,null,null,null);a.default=n.exports}}]);